{
    "contents" : "# Author: Christina Bergmann (chbergma 'at' gmail)\n# Last modified: 07.07.2016\n# Description: Analyze data\n# Analyzing between-/within-speaker discriminability of sound contrasts in the Brent corpus\n\nlibrary(dplyr)\n\n#For sampling later we need to add this column\nrawdata_within$speakerpairs = paste(rawdata_within$speaker, rawdata_within$speaker, sep=\"-\")\n\n#pipeline, as agreed on by Bergmann, Cristia, Dupoux in June 2016\n#Cf https://docs.google.com/document/d/1x0lpC0sgho8k9h0gE3gi0VwWgcZ2RyTd1uM0nRBhjXE/edit\n\n#### Effect per condition (within and across speaker) ####\n#Average over contexts → average over contrasts  → (one number per speaker-speaker) → \n# average all s-s in within and, separately, all s-s in between → (average effect) \n\n#Step 1, have one mean score per contrast-speaker(pair)\nbetween_percontrastspeaker = rawdata_between %>%\n  group_by(speakerpairs, contrasts) %>%\n  summarise(mean_score_temp = mean(score)) %>%\n  ungroup() \n\nwithin_contrast = rawdata_within%>%\n  group_by(contrasts) %>%\n  summarise(sum_n = sum(n)) %>%\n  ungroup() \n\nwithin_percontrastspeaker = rawdata_within %>%\n  group_by(speakerpairs, contrasts) %>%\n  summarise(mean_score_temp = mean(score)) %>%\n  ungroup() \n\n#Step 2: Have one number per speaker(pair)\nbetween = between_percontrastspeaker %>%\n  group_by(speakerpairs) %>%\n  summarise(mean_score = mean(mean_score_temp)) %>%\n  ungroup()\n\n\n\nwithin = within_percontrastspeaker %>%\n  group_by(speakerpairs) %>%\n  summarise(mean_score = mean(mean_score_temp)) %>%\n  ungroup()\n\n#Step 3: Final score\nbetween_score = mean(between$mean_score)\n\nwithin_score = mean(within$mean_score)\n\n\n#### Difference score ####\n#→ do within minus between → (difference score)\n\ndifference_score = within_score-between_score\n\n\n#### Create a null distribution: Random Sampling per speakerpair (re-assigininh within and across speaker) ####\n#Then take matrix and shuffle the within & between labels 10,000 → \n#average all s-s in within and, separately, all s-s in between → (average effect) → do within minus between → (difference score)\n\n\n\nsampling_data = merge(between, within, all = TRUE)\n\nn_loops = 10000\n\nn_within = length(within$speakerpairs)\nn_between = length(between$speakerpairs)\n\nwithin_results = matrix(NA, nrow = n_loops, ncol = 1)\nbetween_results = matrix(NA, nrow = n_loops, ncol = 1)\ndiff_results = matrix(NA, nrow = n_loops, ncol = 1)\n\nset.seed(111)\nfor(loop in 1:n_loops){\n  within_sampling_rows = sample(nrow(sampling_data), n_within)\n  sample_within = sampling_data[within_sampling_rows, ]\n  sample_between = sampling_data[-within_sampling_rows, ]\n  \n  #Step 3: Final score, directly record\n  between_results[loop] = mean(sample_between$mean_score)\n  \n  within_results[loop] = mean(sample_within$mean_score)\n  \n  #→ do within minus between → (difference score)\n  diff_results[loop] = mean(sample_within$mean_score) - mean(sample_between$mean_score)\n}\n\n#### Goal: Get CI for each contrast ####\n# 1. Average over contexts → 2. average over s-s-w and, separately, s-s-b per contrast → 3. do the difference per contrast → 4. average effect per contrast \n#shuffle s-s-w and s-s-b labels after step 1 and redo 2-4 10k times \n\n#We already averaged over contexts and can just use: between_percontrastspeaker, within_percontrastspeaker\n\n\n#We want to randomly subsample separately for the within and across speaker condition. \n\nn_loops_contrast = 1000\n\nn_contrasts = length(levels(rawdata_within$contrasts))\n\nwithin_results_contrast = matrix(NA, nrow = n_loops_contrast, ncol = n_contrasts)\nbetween_results_contrast = matrix(NA, nrow = n_loops_contrast, ncol = n_contrasts)\ndiff_results_contrast = matrix(NA, nrow = n_loops_contrast, ncol = n_contrasts)\n\nset.seed(111)\nfor(loop in 1:n_loops_contrast){\n  #Todo: reshuffle label per contrast. \n  \n}\n\n\n\n#within_ci = quantile(within_results, probs = c(.05, .95))\n#between_ci = quantile(between_results, probs = c(.05, .95))\n\n#diff_ci = quantile(diff_results, probs = c(.05, .95))\n",
    "created" : 1467886223131.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "914402953",
    "id" : "5A1B1C4E",
    "lastKnownWriteTime" : 1467886283,
    "path" : "~/Dropbox/Github/ABX/Brent_Clean/Scripts/Analyze.R",
    "project_path" : "Scripts/Analyze.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}